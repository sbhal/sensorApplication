---
swagger: "2.0"
info:
  description: "All APIs you need to interact with sensors in building"
  version: "1.0.0"
  title: "Sensor API"
host: "localhost:8080"
basePath: "/v1"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /building/{building_id}:
    delete:
      tags:
      - "sensors"
      description: "delete all sensor belonging to building"
      operationId: "deleteAllBuildingSensors"
      parameters:
      - name: "building_id"
        in: "path"
        description: "Id of building"
        required: true
        type: "string"
      responses:
        204:
          description: "sensors deleted"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Sensors"
    get:
      tags:
      - "sensors"
      summary: "Sensor Types"
      description: "return all sensors present in building"
      operationId: "findAllBuildingSensors"
      parameters:
      - name: "building_id"
        in: "path"
        description: "Id of building"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of sensors belonging to product."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/sensor"
        404:
          description: "sensor not found"
          schema:
            $ref: "#/definitions/errorModel"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Sensors"
  /sensors:
    delete:
      tags:
      - "sensors"
      description: "delete all single sensor"
      operationId: "deleteAllSensors"
      responses:
        204:
          description: "sensors deleted"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Sensors"
    get:
      tags:
      - "sensors"
      summary: "Sensor Types"
      description: "The sensors endpoint returns all sensors installed in current\
        \ building. The response includes the sensor id along with other details about\
        \ sensor."
      operationId: "findAllSensors"
      responses:
        200:
          description: "An array of sensors belonging to product."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/sensor"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/errorModel"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Sensors"
  /sensors/createSensor:
    post:
      tags:
      - "sensors"
      summary: "Sensor creation form"
      description: "Creates sensor"
      operationId: "createSensor"
      parameters:
      - in: "body"
        name: "body"
        description: "Id of building in which sensor is present"
        required: true
        schema:
          $ref: "#/definitions/sensor"
      responses:
        200:
          description: "Sensor created successfully"
          schema:
            $ref: "#/definitions/sensor"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Sensors"
  /sensors/{sensor_id}:
    get:
      tags:
      - "sensors"
      summary: "get sensor/ sensor unit data"
      description: "Fetch contents of sensor or sensor unit."
      operationId: "findSensor"
      parameters:
      - name: "sensor_id"
        in: "path"
        description: "Id of sensor or sensor unit to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "sensor found"
          schema:
            $ref: "#/definitions/sensor"
        404:
          description: "sensor not found"
          schema:
            $ref: "#/definitions/errorModel"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Sensors"
    put:
      tags:
      - "sensors"
      summary: "Update an existing sensor"
      description: ""
      operationId: "updateSensor"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "sensor object that needs to be added to the store"
        required: false
        schema:
          $ref: "#/definitions/sensor"
      - name: "sensor_id"
        in: "path"
        description: "ID of sensor to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/errorModel"
        404:
          description: "sensor not found"
          schema:
            $ref: "#/definitions/errorModel"
        409:
          description: "sensor conflict"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Sensors"
    delete:
      tags:
      - "sensors"
      description: "delete a single sensor based on ID supplied"
      operationId: "deleteSensor"
      parameters:
      - name: "sensor_id"
        in: "path"
        description: "ID of sensor to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "sensor deleted"
        404:
          description: "sensor not found"
          schema:
            $ref: "#/definitions/errorModel"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Sensors"
definitions:
  sensor:
    type: "object"
    required:
    - "building"
    properties:
      id:
        type: "string"
        description: "UUID representing a sensor present in a building"
      name:
        type: "string"
        description: "Display name of sensor"
      description:
        type: "string"
        description: "Description of sensor."
      type:
        type: "string"
        description: "type of sensor"
      building:
        $ref: "#/definitions/building"
      sensorUnit:
        $ref: "#/definitions/sensorUnit"
      data:
        $ref: "#/definitions/sensorData"
    example:
      description: "ABC Pvt Ltd sensor model 3030"
      name: "durham-404-1"
      type: "location or fire or temperature"
      building: {"id": 101}
      data: {"data": "empty"}
  building:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
    example:
      id: 101
  sensorUnit:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
      location:
        type: "string"
  sensorData:
    type: "object"
    properties:
      id:
        type: "string"
      data:
        type: "string"
    example:
      id: 2
  errorModel:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      fields:
        type: "string"
